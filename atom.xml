<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RuoShuiSanQian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hicksalmon.gitee.io/"/>
  <updated>2019-04-25T13:45:25.747Z</updated>
  <id>https://hicksalmon.gitee.io/</id>
  
  <author>
    <name>HickSalmon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer 栈的压入，弹出序列</title>
    <link href="https://hicksalmon.gitee.io/2019/04/25/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%EF%BC%8C%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://hicksalmon.gitee.io/2019/04/25/栈的压入，弹出序列/</id>
    <published>2019-04-25T13:45:25.596Z</published>
    <updated>2019-04-25T13:45:25.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的压入，弹出序列"><a href="#栈的压入，弹出序列" class="headerlink" title="栈的压入，弹出序列"></a>栈的压入，弹出序列</h2><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此处的思路借助一个辅助的栈用来模拟压栈的过程，没次压入一个值，我们将这个值与弹出栈的值相比较看是否相等，如果想等就弹出，然后继续</span></span><br><span class="line"><span class="comment">*判断之前压入的是否没弹出栈中的下一个元素相等，相等就弹出，重复进行，如果不想等，就压入下一个元素再继续比较，直到所有元素压栈完成</span></span><br><span class="line"><span class="comment">*如果辅助栈中的元素不为空，则说明没有符合的弹出顺序。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pushA.length == <span class="number">0</span> || popA.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//辅助栈</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//用来记录弹出栈中的下标序号</span></span><br><span class="line">        <span class="keyword">int</span> popIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pushA.length; i++)&#123;</span><br><span class="line">          stack.push(pushA[i]);</span><br><span class="line">            <span class="comment">//在这里判断辅助栈是否为空，且当前栈顶元素和弹栈的那个元素是否相等</span></span><br><span class="line">          <span class="keyword">while</span>(!stack.empty() &amp;&amp; stack.peek() == popA[popIndex])&#123;</span><br><span class="line">              stack.pop();</span><br><span class="line">              popIndex ++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>用代码麻痹自己：</strong>今天是你的生日，我却没资格送你生日的祝福，希望学习可以麻痹自己，希望你幸福，希望我能早日忘记昨天的不快。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;栈的压入，弹出序列&quot;&gt;&lt;a href=&quot;#栈的压入，弹出序列&quot; class=&quot;headerlink&quot; title=&quot;栈的压入，弹出序列&quot;&gt;&lt;/a&gt;栈的压入，弹出序列&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="刷题" scheme="https://hicksalmon.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="剑指offer" scheme="https://hicksalmon.gitee.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 包含min函数的栈</title>
    <link href="https://hicksalmon.gitee.io/2019/04/24/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://hicksalmon.gitee.io/2019/04/24/包含min函数的栈/</id>
    <published>2019-04-24T13:02:06.118Z</published>
    <updated>2019-04-24T13:02:06.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h2><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*利用两个栈，一个保存传入的数据，一个用来依次保存出现的数字中更小的数字，比如第一次传进来的是 2 ，第二次传进来的</span></span><br><span class="line"><span class="comment">*是 1 ，这个时候我们将1继续放在最小数栈的的顶部，这样就能一直保证那个最小栈的栈顶一直放的是最小的那个数</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Integer temp = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; node)&#123;</span><br><span class="line">                temp = node;</span><br><span class="line">                minStack.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            minStack.push(node);</span><br><span class="line">            stack.push(node);</span><br><span class="line">            temp = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = stack.pop();</span><br><span class="line">        <span class="keyword">int</span> numMin = minStack.pop();</span><br><span class="line">        <span class="keyword">if</span>(num != numMin)&#123;</span><br><span class="line">            minStack.push(numMin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = stack.pop();</span><br><span class="line">        <span class="keyword">int</span> numMin = minStack.pop();</span><br><span class="line">        <span class="keyword">if</span>(num != numMin)&#123;</span><br><span class="line">            minStack.push(numMin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minNum = minStack.pop();</span><br><span class="line">        minStack.push(minNum);</span><br><span class="line">        <span class="keyword">return</span> minNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>不是自己：</strong>明天是个好日子，3月21。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包含min函数的栈&quot;&gt;&lt;a href=&quot;#包含min函数的栈&quot; class=&quot;headerlink&quot; title=&quot;包含min函数的栈&quot;&gt;&lt;/a&gt;包含min函数的栈&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="刷题" scheme="https://hicksalmon.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="剑指offer" scheme="https://hicksalmon.gitee.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 顺时针打印矩阵</title>
    <link href="https://hicksalmon.gitee.io/2019/04/23/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>https://hicksalmon.gitee.io/2019/04/23/顺时针打印矩阵/</id>
    <published>2019-04-23T14:00:50.491Z</published>
    <updated>2019-04-23T14:00:50.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hight = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> wide = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//计算出要进行顺时钟打印的圈数</span></span><br><span class="line">        <span class="comment">//这里为什么是取小的那个数来计算层数，这个我也说不上来，因为我只是一只小猫咪，23333。。。。</span></span><br><span class="line">        <span class="keyword">int</span> count = (Math.min(hight,wide) -<span class="number">1</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">            <span class="comment">//先让从左向右的值存进去；</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; wide - i; k++)&#123;</span><br><span class="line">                result.add(matrix[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再存从由右上到右下的值；</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; hight - i; j++)&#123;</span><br><span class="line">                result.add(matrix[j][wide-i-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再存从右下到左下的值；</span></span><br><span class="line">            <span class="comment">//这里约束条件里hight-i-1 != i是为了不重复添加先从左到右添加的数，</span></span><br><span class="line">            <span class="comment">//如果都是那一行就没必要进行添加了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = wide - i - <span class="number">2</span>;k &gt;= i &amp;&amp; (hight-i-<span class="number">1</span> != i); k--)&#123;</span><br><span class="line">                result.add(matrix[hight-i-<span class="number">1</span>][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后存从左下到左上的值。</span></span><br><span class="line">            <span class="comment">//这里约束条件里wide-i-1 != i是为了不重复添加先从左上到左下添加的数，</span></span><br><span class="line">            <span class="comment">//如果都是那一列就没必要进行添加了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = hight - i - <span class="number">2</span>;(j &gt; i) &amp;&amp; (wide-i-<span class="number">1</span> != i); j--)&#123;</span><br><span class="line">                result.add(matrix[j][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>对不起我没憋住：</strong>今天群里有位老哥的狗，会自己跑到洗手间便便，从不乱拉，这让我感觉很有意思。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;顺时针打印矩阵&quot;&gt;&lt;a href=&quot;#顺时针打印矩阵&quot; class=&quot;headerlink&quot; title=&quot;顺时针打印矩阵&quot;&gt;&lt;/a&gt;顺时针打印矩阵&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="刷题" scheme="https://hicksalmon.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="剑指offer" scheme="https://hicksalmon.gitee.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 二叉树的镜像</title>
    <link href="https://hicksalmon.gitee.io/2019/04/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://hicksalmon.gitee.io/2019/04/22/二叉树的镜像/</id>
    <published>2019-04-22T13:10:40.218Z</published>
    <updated>2019-04-22T13:10:32.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h2><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">二叉树的镜像定义：源二叉树 </span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">6</span>   <span class="number">10</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">5</span>  <span class="number">7</span> <span class="number">9</span> <span class="number">11</span></span><br><span class="line">    镜像二叉树</span><br><span class="line">        <span class="number">8</span></span><br><span class="line">       /  \</span><br><span class="line">      <span class="number">10</span>   <span class="number">6</span></span><br><span class="line">     / \  / \</span><br><span class="line">    <span class="number">11</span> <span class="number">9</span> <span class="number">7</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">public class TreeNode &#123;</span><br><span class="line">    int val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = null;</span><br><span class="line">    TreeNode right = null;</span><br><span class="line"></span><br><span class="line">    public TreeNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public void Mirror(TreeNode root) &#123;</span><br><span class="line">        TreeNode tmp = null;</span><br><span class="line">        //当树不为空的时候我们将左子树和右子树交换</span><br><span class="line">        <span class="keyword">if</span>(root != null)&#123;</span><br><span class="line">            tmp = root.left;</span><br><span class="line">            root.left = root.right;</span><br><span class="line">            root.right = tmp;</span><br><span class="line">            //当左子树不为空的时候，继续进行递归</span><br><span class="line">            <span class="keyword">if</span>(root.left != null)&#123;</span><br><span class="line">                Mirror(root.left);</span><br><span class="line">            &#125;</span><br><span class="line">            //当右子树不为空的时候，继续进行递归</span><br><span class="line">            <span class="keyword">if</span>(root.right != null)&#123;</span><br><span class="line">                Mirror(root.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>水水更健康：</strong>今天听说B站的源码被上传到github上了，本人在此声明：从未clone，下载或者以任何途径获得bilibili公司的任何非正常途径公开的代码。也没有参与，传播，任何bilibili的负面信息，且不认识看源码的兄弟。特此声明！划清界限</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的镜像&quot;&gt;&lt;a href=&quot;#二叉树的镜像&quot; class=&quot;headerlink&quot; title=&quot;二叉树的镜像&quot;&gt;&lt;/a&gt;二叉树的镜像&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="刷题" scheme="https://hicksalmon.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="剑指offer" scheme="https://hicksalmon.gitee.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 树的子结构</title>
    <link href="https://hicksalmon.gitee.io/2019/04/21/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <id>https://hicksalmon.gitee.io/2019/04/21/树的子结构/</id>
    <published>2019-04-21T14:05:37.421Z</published>
    <updated>2019-04-21T14:05:37.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h2><hr><p>###题目描述<br>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">public class TreeNode &#123;</span><br><span class="line">    int val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = null;</span><br><span class="line">    TreeNode right = null;</span><br><span class="line"></span><br><span class="line">    public TreeNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public boolean HasSubtree(TreeNode root1,TreeNode root2) &#123;</span><br><span class="line">        boolean result = false;</span><br><span class="line">//只有当两棵树都不为空才进行比较，否则返回false</span><br><span class="line">        <span class="keyword">if</span>(root1 != null &amp;&amp; root2 != null)&#123;</span><br><span class="line">//如果当前节点值相等，我们则继续进行从当前节点的比较</span><br><span class="line">            <span class="keyword">if</span>(root1.val == root2.val)&#123;</span><br><span class="line">                result = isHaveRootB(root1,root2);</span><br><span class="line">            &#125;</span><br><span class="line">//如果当前节点不相等，我们继续比较root2是不是左子树的子树</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(root1.left,root2);</span><br><span class="line">            &#125;</span><br><span class="line">//如果当前节点不相等，我们继续比较root2是不是右子树的子树</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(root1.right,root2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean isHaveRootB(TreeNode node1,TreeNode node2)&#123;</span><br><span class="line">//如果子树已经遍历到最后，则前面都相等，此时说明是子树，返回true</span><br><span class="line">        <span class="keyword">if</span>(node2 == null)&#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">//如果node1已经遍历完，说明没找到，此时返回false</span><br><span class="line">        <span class="keyword">if</span>(node1 == null)&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">//如果两个值不相等，说明不是的，直接返回false</span><br><span class="line">        <span class="keyword">if</span>(node1.val != node2.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">//如果当前节点的值相等，则我们继续比较他们的左子树和右子树是不是相等</span><br><span class="line">        <span class="keyword">return</span> isHaveRootB(node1.left,node2.left) &amp;&amp; isHaveRootB(node1.right,node2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><strong>修炼：</strong>每一次做题都不会辜负自己。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;树的子结构&quot;&gt;&lt;a href=&quot;#树的子结构&quot; class=&quot;headerlink&quot; title=&quot;树的子结构&quot;&gt;&lt;/a&gt;树的子结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;###题目描述&lt;br&gt;输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子
      
    
    </summary>
    
      <category term="刷题" scheme="https://hicksalmon.gitee.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="剑指offer" scheme="https://hicksalmon.gitee.io/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>程序员修炼之路</title>
    <link href="https://hicksalmon.gitee.io/2019/04/20/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AF/"/>
    <id>https://hicksalmon.gitee.io/2019/04/20/程序员修炼之路/</id>
    <published>2019-04-20T03:58:27.864Z</published>
    <updated>2019-04-20T03:58:28.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序员修炼之路"><a href="#程序员修炼之路" class="headerlink" title="程序员修炼之路"></a>程序员修炼之路</h2><hr><p><a href="https://github.com/Snailclimb/programmer-advancement" target="_blank" rel="noopener">https://github.com/Snailclimb/programmer-advancement</a></p><hr><blockquote><p><strong>修炼：</strong>和优秀的人一起久了，也会变得优秀。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序员修炼之路&quot;&gt;&lt;a href=&quot;#程序员修炼之路&quot; class=&quot;headerlink&quot; title=&quot;程序员修炼之路&quot;&gt;&lt;/a&gt;程序员修炼之路&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Snailclimb/progra
      
    
    </summary>
    
      <category term="资源" scheme="https://hicksalmon.gitee.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="资源" scheme="https://hicksalmon.gitee.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>计划清单</title>
    <link href="https://hicksalmon.gitee.io/2019/04/17/%E7%BC%98%E8%B5%B7/"/>
    <id>https://hicksalmon.gitee.io/2019/04/17/缘起/</id>
    <published>2019-04-17T00:40:29.763Z</published>
    <updated>2019-04-20T13:40:04.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.一个人去泰山看一次日出；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.坚持早睡早起多运动；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.找到一份工作；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.刷150道题（leetcode 或者其他优先刷完剑指offer）；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.看两本好书。</p><hr><blockquote><p><strong>人生：</strong>只有平淡才能让自己的人生走的更远，只有多去看世界才能有与众不同的眼界。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.一个人去泰山看一次日出；&lt;br&gt;&amp;nbsp;&amp;nbsp
      
    
    </summary>
    
      <category term="计划" scheme="https://hicksalmon.gitee.io/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="清单" scheme="https://hicksalmon.gitee.io/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>梦</title>
    <link href="https://hicksalmon.gitee.io/2019/04/16/%E6%A2%A6%EF%BC%9F/"/>
    <id>https://hicksalmon.gitee.io/2019/04/16/梦？/</id>
    <published>2019-04-16T02:56:06.319Z</published>
    <updated>2019-04-16T04:44:15.077Z</updated>
    
    <content type="html"><![CDATA[<p><strong>昨日</strong>     一梦惊醒睡中人，我是真睡是假睡？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;昨日&lt;/strong&gt;     一梦惊醒睡中人，我是真睡是假睡？&lt;/p&gt;

      
    
    </summary>
    
      <category term="心情" scheme="https://hicksalmon.gitee.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="随记" scheme="https://hicksalmon.gitee.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
</feed>
